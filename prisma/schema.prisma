generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Pet {
  id               Int                @id @default(autoincrement())
  name             String
  breed            BredByPet[]
  genre            Int?
  birthDate        DateTime
  image            String?
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @updatedAt @map(name: "updated_at")
  AppointmentByPet AppointmentByPet[]
}

model BredByPet {
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     Int
  breed     Breed    @relation(fields: [breedId], references: [id])
  breedId   Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@id([petId, breedId])
}

model Breed {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  BredByPet        BredByPet[]
  AppointmentByPet AppointmentByPet[]
}

model AppointmentByPet {
  pet           Pet         @relation(fields: [petId], references: [id])
  petId         Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")

  Breed   Breed? @relation(fields: [breedId], references: [id])
  breedId Int?
  @@id([petId, appointmentId])
}

model Appointment {
  id               Int                @id @default(autoincrement())
  description      String
  symptoms         String
  image            String?
  bloodTest        String?
  bill             Float?
  medicine         String?
  status           AppointmentStatus  @default(BOOKED)
  paymentStatus    PaymentStatus      @default(PENDING)
  AppointmentByPet AppointmentByPet[]
}

enum AppointmentStatus {
  BOOKED
  ATTENDED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  age           Int?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  pets          Pet[]
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(CLIENT)

  @@map(name: "users")
}

enum UserRole {
  ADMIN
  CLIENT
  VETERINARY
}
